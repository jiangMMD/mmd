<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd">

    <!--<mvc:annotation-driven />-->
    <context:annotation-config/>
    <context:component-scan base-package="com.mmd.*"/>
    <!--启动spring定时任务注解-->
    <task:annotation-driven/>
    <!--<task:scheduler id="scheduler" pool-size="5"></task:scheduler>-->

    <!--自动什么aop注解-->
    <aop:aspectj-autoproxy/>
    <bean id="properties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:redis.properties</value>
                <value>classpath:email.properties</value>
                <!--<value>classpath:rabbit.properties</value>-->
            </list>
        </property>
    </bean>
    <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="properties" ref="properties"></property>
    </bean>
    <!--采用阿里巴巴druid数据库连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="name" value="eschool-db" />
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.userName}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
        <property name="initialSize" value="${jdbc.initialSize}" />
        <!-- 连接池最小连接数 -->
        <property name="minIdle" value="${jdbc.minIdle}" />
        <!-- 连接池最大连接数 -->
        <property name="maxActive" value="${jdbc.maxActive}" />
        <!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
        <property name="maxWait" value="${jdbc.maxWait}" />
        <property name="useUnfairLock" value="${jdbc.useUnfairLock}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。 -->
        <property name="validationQuery" value="${jdbc.validationQuery}" />
        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
        <property name="testOnReturn" value="${jdbc.testOnReturn}" />
        <!-- 是否缓存preparedStatement，也就是PSCache，在mysql5.5以下的版本中没有PSCache功能，建议关闭 -->
        <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />
        <!-- 是否开启连接租赁机制，当开启租赁机制后。当某连接的租赁时常超过removeAbandonedTimeout设定的值后，便直接关闭物理连接。 -->
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}"/>
        <!-- 租赁时常，单位秒 -->
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />
        <!--开启防止sql注入，及其监控拦截filter-->
        <property name="filters" value="wall,stat"/>
        <!--记录执行时间超过5s的sql-->
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter"/>
            </list>
        </property>
        <property name="timeBetweenLogStatsMillis" value="3000000"/>
    </bean>

    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="slowSqlMillis" value="5000"/>
        <property name="logSlowSql" value="true"/>
    </bean>

    <!--配置mybatis 数据库连接-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath:com/mmd/dao/*.xml"/>
        <property name="configLocation" value="classpath:sqlMapConfig.xml"/>
    </bean>
    <!--配置mapping扫描包-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.mmd.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>



    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxWaitMillis" value="${redis.pool.maxWait}"/>
        <property name="maxTotal" value="${redis.pool.maxActive}"/>
        <property name="maxIdle" value="${redis.pool.maxIdle}"/>
    </bean>

    <!--&lt;!&ndash; 配置redis连接&ndash;&gt;-->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">
        <property name="hostName" value="${redis.ip}"/>
        <property name="port" value="${redis.port}"/>
        <property name="password" value="${redis.requirepass}"/>
        <property name="poolConfig" ref="poolConfig"/>
    </bean>

    <!--<bean id="jedisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
        <!--<property name="connectionFactory" ref="connectionFactory"/>-->
        <!--<property name="keySerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
        <!--</property>-->
        <!--<property name="valueSerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>-->
        <!--</property>-->
        <!--<property name="hashKeySerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
        <!--</property>-->
        <!--<property name="hashValueSerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>-->
        <!--</property>-->
    <!--</bean>-->


    <bean id="redisHttpSessionConfiguration" class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
        <property name="maxInactiveIntervalInSeconds" value="10800" />
    </bean>

    <!--配置事物切入点-->
    <aop:config>
        <aop:pointcut id="bussnessService" expression="(execution(public * com.mmd.service.*.*(..)))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="bussnessService"/>
    </aop:config>


    <!--配置事物管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--配置支持注解事物-->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>


    <!--配置事物处理-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>


    <!--配置Druid的spirng监控-->
    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>
    <aop:config>
        <aop:pointcut id="druid-stat-pointcut" expression="(execution(public * com.mmd.controll.*.*(..)))
        || execution(public * com.mmd.service.*.*(..)) || execution(public * com.mmd.dao.*.*(..))"/>
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/>
    </aop:config>


    <!--<bean id="myFristAspect" class="com.jzy.aspect.MyFristAspect"></bean>-->


    <!--<bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">-->
        <!--<property name="jobFactory" ref="jobFactory"></property>-->
    <!--</bean>-->

    <import resource="spring-email.xml" />
</beans>